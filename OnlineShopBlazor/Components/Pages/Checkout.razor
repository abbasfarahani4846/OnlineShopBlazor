@page "/Checkout"
@using Blazored.FluentValidation
@using FluentValidation
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using OnlineShopBlazor.Models.ViewModels
@using System.Security.Claims
@inject IDbContextFactory<OnlineShopOrginalContext> DbContextFactory
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@inject IValidator<Order> Validator
@attribute [Authorize]

<!--Checkout page section-->
<div class="checkout_section" id="accordion" style="margin-top:200px">
    <div class="container">
        <EditForm method="post" Model="Order" OnValidSubmit="SubmitOrder" Enhance>
            <FluentValidationValidator Validator="Validator" />

            <div class="checkout_form">
                <div class="row">
                    <div class="col-lg-7 col-md-6">

                        <h3>Billing Details</h3>
                        <div class="checkout_form_input">
                            <label for="country">country <span>*</span></label>
                            <InputSelect @bind-Value="Order.Country" class="form-control w-100" id="country">
                                <option value="United Kingdom (UK)">United Kingdom (UK) </option>
                                <option value="Algeria">Algeria</option>
                                <option value="Afghanistan">Afghanistan</option>
                                <option value="Ghana">Ghana</option>
                                <option value="Albania">Albania</option>
                                <option value="Bahrain">Bahrain</option>
                                <option value="Colombia">Colombia</option>
                                <option value="Dominican Republic">Dominican Republic</option>
                            </InputSelect>
                        </div>
                        <div class="checkout_form_input">
                            <label>First Name <span>*</span></label>
                            <InputText id="title" @bind-Value="Order.FirstName" class="form-control" />
                            <ValidationMessage For="() => Order.FirstName" class="text-danger" />
                        </div>
                        <div class="checkout_form_input">
                            <label>Last Name <span>*</span></label>
                            <InputText id="title" @bind-Value="Order.LastName" class="form-control" />
                            <ValidationMessage For="() => Order.LastName" class="text-danger" />
                        </div>
                        <div class="checkout_form_input">
                            <label>Company Name</label>
                            <InputText id="title" @bind-Value="Order.CompanyName" class="form-control" />
                            <ValidationMessage For="() => Order.CompanyName" class="text-danger" />
                        </div>
                        <div class="checkout_form_input">
                            <label>Address <span>*</span></label>
                            <InputText id="title" @bind-Value="Order.Address" class="form-control" />
                            <ValidationMessage For="() => Order.Address" class="text-danger" />
                        </div>
                        <div class="checkout_form_input">
                            <label>Town / City <span>*</span></label>
                            <InputText id="title" @bind-Value="Order.City" class="form-control" />
                            <ValidationMessage For="() => Order.City" class="text-danger" />
                        </div>
                        <div class="checkout_form_input">
                            <label> Phone <span>*</span></label>
                            <InputText id="title" @bind-Value="Order.Phone" class="form-control" />
                            <ValidationMessage For="() => Order.Phone" class="text-danger" />
                        </div>
                        <div class="checkout_form_input">
                            <label> Email <span>*</span></label>
                            <InputText id="title" @bind-Value="Order.Email" class="form-control" />
                            <ValidationMessage For="() => Order.Email" class="text-danger" />
                        </div>
                        <div class="checkout_form_input">
                            <label> Comment</label>
                            <InputText id="title" @bind-Value="Order.Comment" class="form-control" />
                            <ValidationMessage For="() => Order.Comment" class="text-danger" />
                        </div>

                        <div class="place_order_btn">
                            <button type="submit" class="btn btn-primary btn-block w-100" disabled="@(IsLoading?"disabled":null)">
                                @if (IsLoading)
                                {
                                    <Spinner Class="me-3" Type="SpinnerType.Dots" Color="SpinnerColor.Light" />
                                }
                                else
                                {
                                    <span>
                                        place order
                                    </span>
                                }
                            </button>
                        </div>
                    </div>
                    <div class="col-lg-5 col-md-6">
                        <div class="order_table_right">
                            <h3>Your order</h3>
                            <div class="order_table table-responsive">
                                <table>
                                    <thead>
                                        <tr>
                                            <th>Product</th>
                                            <th class="text-right">Total</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var item in Products)
                                        {
                                            <tr>
                                                <td>
                                                    @item.Title
                                                </td>
                                                <td>
                                                    $@item.RowSum.ToString("F")
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                    <tfoot>
                                        <tr>
                                            <td>Cart Subtotal </td>
                                            <td class="text-right">
                                                $@Products.Sum(x => x.RowSum).ToString("F")
                                            </td>
                                        </tr>
                                        @if (Order.Shipping != null)
                                        {
                                            <tr>
                                                <td>Shipping </td>
                                                <td class="text-right">$@Order.Shipping?.ToString("F")</td>
                                            </tr>
                                        }

                                        @if (!string.IsNullOrEmpty(Order.CouponCode))
                                        {
                                            <tr>
                                                <td>
                                                    Discount - &nbsp; @Order.CouponCode &nbsp; &nbsp;
                                                    <a @onclick="RemoveCoupon">
                                                        <i class="ion-android-close"></i>
                                                    </a>
                                                </td>
                                                <td class="text-right">
                                                    $@Order.CouponDiscount?.ToString("F")
                                                </td>
                                            </tr>
                                        }

                                        <tr class="order_total">
                                            <th>Order Total</th>
                                            @{
                                                var orderTotal = (Products.Sum(x => x.RowSum) + Order.Shipping);
                                                if (Order.CouponDiscount != null)
                                                {
                                                    orderTotal -= Order.CouponDiscount;
                                                }
                                            }
                                            <td class="text-right">$@orderTotal?.ToString("F")</td>
                                        </tr>
                                    </tfoot>
                                </table>
                            </div>

                        </div>

                        <div class="col-12 pe-2 ps-3">
                            @if (!string.IsNullOrEmpty(Order.CouponCode))
                            {
                                <div class="alert alert-success" role="alert">
                                    Coupon successfully applied
                                </div>

                            }
                            else
                            {
                                <div class="checkout_info coupon_info row">
                                    <div class="col-8">
                                        <input placeholder="Coupon code" @bind-value="CouponCode" class="form-control" type="text" name="couponCode">
                                    </div>
                                    <div class="col-4">
                                        <button type="submit" class="btn btn-primary btn-block w-100" disabled="@(IsLoading?"disabled":null)" @onclick="async()=>await ApplyCoupon()">
                                            @if (IsLoading)
                                            {
                                                <Spinner Class="me-3" Type="SpinnerType.Dots" Color="SpinnerColor.Light" />
                                            }
                                            else
                                            {
                                                <span>
                                                    Apply coupon
                                                </span>
                                            }
                                        </button>
                                    </div>
                                    <br />
                                    @if (!string.IsNullOrEmpty(ErrorMessage))
                                    {
                                        <div class="alert alert-danger" role="alert">
                                            @ErrorMessage
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </EditForm>
    </div>
</div>
<!--Checkout page section end-->
@code {
    // Public property to hold the list of items displayed in the cart view.
    // Initialized with an empty list.
    public Order Order { get; set; } = new();
    public List<CartViewItemViewModel> Products { get; set; } = new();

    public string ErrorMessage { get; set; } = "";

    public string CouponCode { get; set; } = "";

    public bool IsLoading { get; set; }

    private async Task ApplyCoupon()
    {
        IsLoading = true;

        if (string.IsNullOrEmpty(CouponCode))
        {
            IsLoading = false;
            ErrorMessage = "Coupon is empty";
            return;
        }
        using var _context = DbContextFactory.CreateDbContext();

        var coupon = await _context.Coupons.FirstOrDefaultAsync(x => x.Code == CouponCode);
        if (coupon == null)
        {
            IsLoading = false;
            ErrorMessage = "Coupon not exist";
            return;
        }

        ErrorMessage = "";
        Order.CouponCode = coupon.Code;
        Order.CouponDiscount = coupon.Discount;

        IsLoading = false;
    }
    private void RemoveCoupon()
    {
        Order.CouponCode = null;
        Order.CouponDiscount = null;
    }
    private async Task SubmitOrder()
    {
        IsLoading = true;
        using var _context = DbContextFactory.CreateDbContext();

        if (!string.IsNullOrEmpty(CouponCode))
        {
            var coupon = await _context.Coupons.FirstOrDefaultAsync(x => x.Code == CouponCode);
            if (coupon == null)
            {
                IsLoading = false;
                ErrorMessage = "Coupon not exist";
                return;
            }
        }

        Order.CreateDate = DateTime.Now;
        Order.SubTotal = Products.Sum(x => x.RowSum);
        Order.Total = (Order.SubTotal + Order.Shipping ?? 0);
        Order.UserId = await GetUserIdAsync();

        if (Order.CouponDiscount != null)
        {
            Order.Total -= Order.CouponDiscount;
        }

        _context.Orders.Add(Order);
        _context.SaveChanges();

        //-------------------------------------------------------

        List<OrderDetail> orderDetails = new List<OrderDetail>();

        foreach (var item in Products)
        {
            OrderDetail orderDetailItem = new OrderDetail()
                {
                    Count = item.Count,
                    ProductTitle = item.Title ?? "",
                    ProductPrice = (decimal)item.Price,
                    OrderId = Order.Id,
                    ProductId = item.ProductId
                };

            orderDetails.Add(orderDetailItem);
        }

        //-------------------------------------------------------
        _context.OrderDetails.AddRange(orderDetails);
        _context.SaveChanges();

        // Redirect to PayPal
        NavigationManager.NavigateTo("/RedirectToPaypal?OrderId=" + Order.Id);
    }


    // Blazor lifecycle method that runs when the component is initialized.
    // Asynchronously loads the cart data.
    protected override async Task OnInitializedAsync()
    {
        // Create a database context instance using the injected factory.
        // The 'using' statement ensures the context is disposed properly.
        using var _context = DbContextFactory.CreateDbContext();

        Setting setting = _context.Settings.First();

        Order.Shipping = setting.Shipping;
        await LoadCartAsync();
    }

    // Asynchronous method to retrieve the ID of the currently authenticated user.
    private async Task<int> GetUserIdAsync()
    {
        // Get the current authentication state using the injected provider.
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        // Get the user principal from the authentication state.
        var user = authState.User;

        // Check if the user is authenticated.
        if (user.Identity?.IsAuthenticated == true)
        {
            // Find the NameIdentifier claim (usually contains the user ID).
            var userIdClaim = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            // Parse the user ID claim to an integer and return it.
            // Use TryParse for safer parsing.
            if (int.TryParse(userIdClaim, out int userId))
            {
                return userId;
            }
        }
        // Return 0 if the user is not authenticated or the ID cannot be parsed.
        return 0;
    }

    // Asynchronous method to load the user's cart items from the database.
    private async Task LoadCartAsync()
    {
        // Create a database context instance using the injected factory.
        // The 'using' statement ensures the context is disposed properly.
        using var _context = DbContextFactory.CreateDbContext();

        // Get the ID of the currently logged-in user.
        var userId = await GetUserIdAsync();

        // Retrieve all cart items belonging to the current user from the database.
        var cartItems = await _context.Carts
                                     .Where(c => c.UserId == userId) // Filter by user ID
                                     .ToListAsync(); // Execute the query asynchronously

        // Extract the distinct product IDs from the cart items.
        var productIds = cartItems.Select(c => c.ProductId).Distinct().ToList();

        // Retrieve the product details for all products present in the cart.
        var products = await _context.Products
                                   .Where(p => productIds.Contains(p.Id)) // Filter by the list of product IDs
                                   .ToListAsync(); // Execute the query asynchronously

        var result = new List<CartViewItemViewModel>();
        foreach (var item in cartItems)
        {
            // Find the corresponding product details for the current cart item.
            var product = products.FirstOrDefault(p => p.Id == item.ProductId);

            // If product details are not found (e.g., product deleted), return null.
            if (product == null) return;

            // Create a new view model instance with combined cart and product data.
            var cartitem = new CartViewItemViewModel
                {
                    ProductId = product.Id,
                    Title = product.Title,
                    ImageName = product.ImageName,
                    Price = product.Price ?? 0, // Use null-coalescing operator for default value
                    Discount = product.Discount ?? 0, // Use null-coalescing operator for default value
                    Count = item.Count,
                };

            cartitem.RowSum = cartitem.Count * (cartitem.Price - cartitem.Discount);

            result.Add(cartitem);
        }
        Products = result;
    }

}