@page "/products/create"
@using Microsoft.EntityFrameworkCore
@using OnlineShopBlazor.Models.Db
@inject IDbContextFactory<OnlineShopBlazor.Models.Db.OnlineShopOrginalContext> DbFactory
@inject NavigationManager NavigationManager
@inject IWebHostEnvironment WebHostEnvironment
@rendermode InteractiveServer

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Product</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Product" OnValidSubmit="AddProduct" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="mb-3">
                <label for="title" class="form-label">Title:</label>
                <InputText id="title" @bind-Value="Product.Title" class="form-control" />
                <ValidationMessage For="() => Product.Title" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="description" class="form-label">Description:</label>
                <InputText id="description" @bind-Value="Product.Description" class="form-control" />
                <ValidationMessage For="() => Product.Description" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="text" class="form-label">Text:</label>
                <InputTextArea id="text" @bind-Value="Product.Text" class="form-control" />
                <ValidationMessage For="() => Product.Text" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="price" class="form-label">Price:</label>
                <InputNumber id="price" @bind-Value="Product.Price" class="form-control" />
                <ValidationMessage For="() => Product.Price" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="discount" class="form-label">Discount:</label>
                <InputNumber id="discount" @bind-Value="Product.Discount" class="form-control" />
                <ValidationMessage For="() => Product.Discount" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="imagename" class="form-label">ImageName:</label>
                <InputFile Onchange="LoadMainImageFiles" class="form-control" />

            </div>
            <div class="mb-3">
                <label for="Gallery" class="form-label">Gallery:</label>
                <InputFile Onchange="LoadGalleryFiles" class="form-control" multiple />
            </div>
            <div class="mb-3">
                <label for="qty" class="form-label">Qty:</label>
                <InputNumber id="qty" @bind-Value="Product.Qty" class="form-control" />
                <ValidationMessage For="() => Product.Qty" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="tags" class="form-label">Tags:</label>
                <InputText id="tags" @bind-Value="Product.Tags" class="form-control" />
                <ValidationMessage For="() => Product.Tags" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="VideoUrl" class="form-label">VideoUrl:</label>
                <InputText id="VideoUrl" @bind-Value="Product.VideoUrl" class="form-control" />
                <ValidationMessage For="() => Product.VideoUrl" class="text-danger" />
            </div>
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/products">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Product Product { get; set; } = new();
    private IBrowserFile? UploadedFile { get; set; }
    private List<IBrowserFile>? GalleryFiles { get; set; } = new List<IBrowserFile>();

    private FluentValidationValidator? _fluentValidationValidator;

    private void LoadMainImageFiles(InputFileChangeEventArgs e)
    {
        UploadedFile = e.File;
    }
    private void LoadGalleryFiles(InputFileChangeEventArgs e)
    {
        GalleryFiles.AddRange(e.GetMultipleFiles());
    }

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddProduct()
    {
        var uploadPath = Path.Combine(WebHostEnvironment.WebRootPath, "images", "products");
       
        if (UploadedFile != null)
        {
            
            var uniqueFileName = Guid.NewGuid().ToString() + Path.GetExtension(UploadedFile.Name);
            var filePath = Path.Combine(uploadPath, uniqueFileName);

            const long maxFileSize = 5 * 1024 * 1024; // 5 MB

            await using var fileStream = new FileStream(filePath, FileMode.Create);
            await UploadedFile.OpenReadStream(maxFileSize).CopyToAsync(fileStream);

            Product.ImageName = uniqueFileName; // Save file name
        }

        using var context = DbFactory.CreateDbContext();
        context.Products.Add(Product);
        await context.SaveChangesAsync();


        if (GalleryFiles != null)
        {

            foreach (var item in GalleryFiles)
            {
                var uniqueFileName = Guid.NewGuid().ToString() + Path.GetExtension(item.Name);
                var filePath = Path.Combine(uploadPath, uniqueFileName);

                const long maxFileSize = 5 * 1024 * 1024; // 5 MB

                await using var fileStream = new FileStream(filePath, FileMode.Create);
                await item.OpenReadStream(maxFileSize).CopyToAsync(fileStream);

                ProductGallery galleryItem = new ProductGallery();
                galleryItem.ImageName = uniqueFileName;
                galleryItem.ProductId = Product.Id;

                context.ProductGalleries.Add(galleryItem);
            }

            await context.SaveChangesAsync();
        }

        
        NavigationManager.NavigateTo("/products");
    }
}
