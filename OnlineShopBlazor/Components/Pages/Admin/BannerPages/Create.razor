@page "/banners/create"
@using Microsoft.EntityFrameworkCore
@using OnlineShopBlazor.Models.Db
@using System.ComponentModel.DataAnnotations;
@inject IDbContextFactory<OnlineShopBlazor.Models.Db.OnlineShopOrginalContext> DbFactory
@inject NavigationManager NavigationManager
@inject IWebHostEnvironment WebHostEnvironment
@using System.IO
@using Blazored.FluentValidation
@rendermode InteractiveServer

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Banner</h2>
<hr />

@*

https://github.com/Blazored/FluentValidation
*@

<div class="row">
    <div class="col-md-4">
        <EditForm Model="Banner" OnValidSubmit="AddBanner" FormName="create">

            <FluentValidationValidator @ref="_fluentValidationValidator" />
            <ValidationSummary />

            <div class="mb-3">
                <label for="title" class="form-label">Title:</label>
                <InputTextArea id="title" @bind-Value="Banner.Title" class="form-control" />
                <ValidationMessage For="() => Banner.Title" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="description" class="form-label">Description:</label>
                <InputTextArea id="description" @bind-Value="Banner.Description" class="form-control" />
                <ValidationMessage For="() => Banner.Description" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="image" class="form-label">Image:</label>
                <InputFile Onchange="LoadFiles" class="form-control" />
                <ValidationMessage For="() => Banner.ImageName" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="priority" class="form-label">Priority:</label>
                <InputNumber id="priority" @bind-Value="Banner.Priority" class="form-control" />
                <ValidationMessage For="() => Banner.Priority" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="link" class="form-label">Link:</label>
                <InputText id="link" @bind-Value="Banner.Link" class="form-control" />
                <ValidationMessage For="() => Banner.Link" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="position" class="form-label">Position:</label>
                <InputSelect @bind-Value="Banner.Position" class="form-control">
                    <option>select youre possitions</option>
                    <option value="slider">slider</option>
                    <option value="banner1">banner1</option>
                    <option value="banner2">banner2</option>
                </InputSelect>
                <ValidationMessage For="() => Banner.Position" class="text-danger" />
            </div>

            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/banners">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Banner Banner { get; set; } = new Banner();
    private IBrowserFile? UploadedFile { get; set; }

    private FluentValidationValidator? _fluentValidationValidator;

    private void LoadFiles(InputFileChangeEventArgs e)
    {
        UploadedFile = e.File;
    }

    private async Task AddBanner()
    {
        bool isValid = await _fluentValidationValidator!.ValidateAsync();
        if (isValid)
        {
            if (UploadedFile != null)
            {
                var uploadPath = Path.Combine(WebHostEnvironment.WebRootPath, "images", "banners");

                var uniqueFileName = Guid.NewGuid().ToString() + Path.GetExtension(UploadedFile.Name);
                var filePath = Path.Combine(uploadPath, uniqueFileName);

                const long maxFileSize = 5 * 1024 * 1024; // 5 MB

                await using var fileStream = new FileStream(filePath, FileMode.Create);
                await UploadedFile.OpenReadStream(maxFileSize).CopyToAsync(fileStream);

                Banner.ImageName = uniqueFileName; // Save file name
            }


            using var context = DbFactory.CreateDbContext();
            context.Banners.Add(Banner);
            await context.SaveChangesAsync();
            NavigationManager.NavigateTo("/banners");

        }
    }
}