@page "/banners/edit"
@using Microsoft.EntityFrameworkCore
@using OnlineShopBlazor.Models.Db
@inject IDbContextFactory<OnlineShopBlazor.Models.Db.OnlineShopContext> DbFactory
@inject NavigationManager NavigationManager
@inject IWebHostEnvironment WebHostEnvironment
@using System.IO
@rendermode InteractiveServer

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Banner</h2>
<hr />

<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Banner" OnValidSubmit="UpdateBanner" FormName="edit" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary role="alert" />
            <input type="hidden" name="Banner.Id" value="@Banner.Id" />
            <input type="hidden" name="Banner.ImageName" value="@Banner.ImageName" />
            <div class="mb-3">
                <label for="title" class="form-label">Title:</label>
                <InputTextArea id="title" @bind-Value="Banner.Title" class="form-control" />
                <ValidationMessage For="() => Banner.Title" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="description" class="form-label">Description:</label>
                <InputTextArea id="description" @bind-Value="Banner.Description" class="form-control" />
                <ValidationMessage For="() => Banner.Description" class="text-danger" />
            </div>
            <div class="mb-3">

                <img src="/images/banners/@Banner.ImageName" class="img-thumbnail" style="max-width:150px" />
                <InputFile OnChange="LoadFiles" class="form-control" />
            </div>
            <div class="mb-3">
                <label for="priority" class="form-label">Priority:</label>
                <InputNumber id="priority" @bind-Value="Banner.Priority" class="form-control" />
                <ValidationMessage For="() => Banner.Priority" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="link" class="form-label">Link:</label>
                <InputText id="link" @bind-Value="Banner.Link" class="form-control" />
                <ValidationMessage For="() => Banner.Link" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="position" class="form-label">Position:</label>
                <InputSelect @bind-Value="Banner.Position" class="form-control">
                    <option value="slider" selected="@((Banner.Position == "slider") ? "selected" : null)">
                        slider
                    </option>
                    <option value="banner1" selected="@((Banner.Position == "banner1") ? "selected" : null)">
                        banner1
                    </option>
                    <option value="banner2" selected="@((Banner.Position == "banner2") ? "selected" : null)">
                        banner2
                    </option>
                </InputSelect>
                <ValidationMessage For="() => Banner.Position" class="text-danger" />
            </div>
            <button type="submit" class="btn btn-primary">Save</button>
        </EditForm>
    </div>
</div>


<div>
    <a href="/banners">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Banner? Banner { get; set; }
    private IBrowserFile? UploadedFile { get; set; }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        UploadedFile = e.File;
    }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Banner ??= await context.Banners.FirstOrDefaultAsync(m => m.Id == Id);

        if (Banner is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateBanner()
    {
        if (UploadedFile != null)
        {
            //حذف عکس اصلی
            if (System.IO.File.Exists(Directory.GetCurrentDirectory() + "\\wwwroot\\images\\banners\\" + Banner.ImageName))
            {
                System.IO.File.Delete(Directory.GetCurrentDirectory() + "\\wwwroot\\images\\banners\\" + Banner.ImageName);
            }


            var uploadPath = Path.Combine(WebHostEnvironment.WebRootPath, "images", "banners");
            Directory.CreateDirectory(uploadPath);

            var uniqueFileName = Guid.NewGuid().ToString() + Path.GetExtension(UploadedFile.Name);
            var filePath = Path.Combine(uploadPath, uniqueFileName);

            const long maxFileSize = 5 * 1024 * 1024; // 5 MB

            await using var fileStream = new FileStream(filePath, FileMode.Create);
            await UploadedFile.OpenReadStream(maxFileSize).CopyToAsync(fileStream);

            Banner.ImageName = uniqueFileName; // Save file name
        }

        using var context = DbFactory.CreateDbContext();
        context.Attach(Banner!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!BannerExists(Banner!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/banners");
    }

    private bool BannerExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Banners.Any(e => e.Id == id);
    }
}
