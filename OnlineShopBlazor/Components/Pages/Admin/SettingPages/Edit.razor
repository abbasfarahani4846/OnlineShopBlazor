@page "/setting/edit"
@using Microsoft.EntityFrameworkCore
@using OnlineShopBlazor.Models.Db
@inject IDbContextFactory<OnlineShopBlazor.Models.Db.OnlineShopOrginalContext> DbFactory
@inject NavigationManager NavigationManager
@inject IWebHostEnvironment WebHostEnvironment
@rendermode InteractiveServer

<PageTitle>
    Setting
</PageTitle>

<h1>Edit</h1>

<h2>Setting</h2>
<hr />
@if (Setting is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Setting" OnValidSubmit="UpdateSetting" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Setting.Id" value="@Setting.Id" />
                <div class="mb-3">
                    <label for="shipping" class="form-label">Shipping:</label>
                    <InputNumber id="shipping" @bind-Value="Setting.Shipping" class="form-control" />
                    <ValidationMessage For="() => Setting.Shipping" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="title" class="form-label">Title:</label>
                    <InputText id="title" @bind-Value="Setting.Title" class="form-control" />
                    <ValidationMessage For="() => Setting.Title" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="address" class="form-label">Address:</label>
                    <InputText id="address" @bind-Value="Setting.Address" class="form-control" />
                    <ValidationMessage For="() => Setting.Address" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="email" class="form-label">Email:</label>
                    <InputText id="email" @bind-Value="Setting.Email" class="form-control" />
                    <ValidationMessage For="() => Setting.Email" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="phone" class="form-label">Phone:</label>
                    <InputText id="phone" @bind-Value="Setting.Phone" class="form-control" />
                    <ValidationMessage For="() => Setting.Phone" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="copyright" class="form-label">CopyRight:</label>
                    <InputText id="copyright" @bind-Value="Setting.CopyRight" class="form-control" />
                    <ValidationMessage For="() => Setting.CopyRight" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="instagram" class="form-label">Instagram:</label>
                    <InputText id="instagram" @bind-Value="Setting.Instagram" class="form-control" />
                    <ValidationMessage For="() => Setting.Instagram" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="facebook" class="form-label">FaceBook:</label>
                    <InputText id="facebook" @bind-Value="Setting.FaceBook" class="form-control" />
                    <ValidationMessage For="() => Setting.FaceBook" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="googleplus" class="form-label">GooglePlus:</label>
                    <InputText id="googleplus" @bind-Value="Setting.GooglePlus" class="form-control" />
                    <ValidationMessage For="() => Setting.GooglePlus" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="youtube" class="form-label">Youtube:</label>
                    <InputText id="youtube" @bind-Value="Setting.Youtube" class="form-control" />
                    <ValidationMessage For="() => Setting.Youtube" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="twitter" class="form-label">Twitter:</label>
                    <InputText id="twitter" @bind-Value="Setting.Twitter" class="form-control" />
                    <ValidationMessage For="() => Setting.Twitter" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="imagename" class="form-label">ImageName:</label>
                    <InputFile Onchange="LoadMainImageFiles" class="form-control" />
                    <br />
                    <img src="/images/@Setting.Logo" class="img-thumbnail" alt="prev logo">
                </div>

                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/settings">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Setting? Setting { get; set; }

    private IBrowserFile? UploadedFile { get; set; }

    private void LoadMainImageFiles(InputFileChangeEventArgs e)
    {
        UploadedFile = e.File;
    }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Setting ??= await context.Settings.FirstOrDefaultAsync();

        if (Setting is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateSetting()
    {
        using var context = DbFactory.CreateDbContext();

        if (UploadedFile != null)
        {
            var uploadPath = Path.Combine(WebHostEnvironment.WebRootPath, "images");

            if (System.IO.File.Exists(Directory.GetCurrentDirectory() + "\\wwwroot\\images\\" + Setting.Logo))
            {
                System.IO.File.Delete(Directory.GetCurrentDirectory() + "\\wwwroot\\images\\" + Setting.Logo);
            }

            var uniqueFileName = Guid.NewGuid().ToString() + Path.GetExtension(UploadedFile.Name);
            var filePath = Path.Combine(uploadPath, uniqueFileName);

            const long maxFileSize = 5 * 1024 * 1024; // 5 MB

            await using var fileStream = new FileStream(filePath, FileMode.Create);
            await UploadedFile.OpenReadStream(maxFileSize).CopyToAsync(fileStream);

            Setting.Logo = uniqueFileName; // Save file name
        }


        context.Attach(Setting!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!SettingExists(Setting!.Id))
            {
                NavigationManager.NavigateTo("/admin");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/admin");
    }

    private bool SettingExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Settings.Any(e => e.Id == id);
    }
}
