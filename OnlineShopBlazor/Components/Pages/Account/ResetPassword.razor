@page "/ResetPassword"
@using FluentValidation
@using Blazored.FluentValidation
@using Microsoft.AspNetCore.Authentication.Cookies
@using OnlineShopBlazor.Models.Validations
@using OnlineShopBlazor.Models.ViewModels
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication;
@inject IDbContextFactory<OnlineShopBlazor.Models.Db.OnlineShopContext> DbFactory

@inject NavigationManager NavigationManager
@inject IValidator<ResetPasswordViewModel> Validator
@rendermode InteractiveServer

<div class="row justify-content-center" style="margin-top: 200px;">
    <div class="col-md-6 col-lg-5">
        <div class="card shadow-sm mt-4">
            <div class="card-header">
                <h3 class="mb-0">Reset password</h3>
            </div>
            <div class="card-body">
                @* EditForm binds directly to the User model instance *@
                <EditForm Model="ResetPasswordModel" Enhance OnValidSubmit="HandleValidSubmit" FormName="ResetPassword">
                    @* Integrate FluentValidation for the User model *@
                    <FluentValidationValidator Validator="Validator" />

                    @* Display general error messages *@
                    @if (!string.IsNullOrEmpty(_errorMessage))
                    {
                        <div class="alert alert-danger" role="alert">
                            @_errorMessage
                        </div>
                    }

                    @* Email Field - Bound to User.Email *@
                    <div class="mb-3">
                        <label for="email" class="form-label">Email address</label>
                        <InputText id="email" type="email" class="form-control" @bind-Value="ResetPasswordModel.Email" placeholder="Enter your email" />
                        <ValidationMessage For="@(() => ResetPasswordModel.Email)" class="invalid-feedback d-block" />
                    </div>

                    @* Password Field - Bound to User.Password *@
                    <div class="mb-3">
                        <label for="password" class="form-label">New Password</label>
                        <InputText id="password" type="password" class="form-control" @bind-Value="ResetPasswordModel.NewPassword" placeholder="Enter your password" />
                        <ValidationMessage For="@(() => ResetPasswordModel.NewPassword)" class="invalid-feedback d-block" />
                    </div>

                    <div class="mb-3">
                        <label for="RecoveryCode" class="form-label">RecoveryCode</label>
                        <InputNumber id="discount" @bind-Value="ResetPasswordModel.RecoveryCode" class="form-control" />
                        <ValidationMessage For="@(() => ResetPasswordModel.RecoveryCode)" class="invalid-feedback d-block" />
                    </div>

                    <div class="d-grid gap-2">
                        <button type="submit" class="btn btn-primary" disabled="@(loading?"disabled":null)">
                            @if (loading)
                            {
                                <Spinner Class="me-3" Type="SpinnerType.Dots" Color="SpinnerColor.Light" />
                            }
                            else
                            {
                                <span>
                                    Reset password
                                </span>
                            }

                        </button>

                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>


@code {
    // Use the User model directly for binding
    [SupplyParameterFromForm]
    public ResetPasswordViewModel ResetPasswordModel { get; set; } = new();
    private string? _errorMessage = null;
    private bool loading = false;


    private async Task HandleValidSubmit()
    {
        loading = true;
        await Task.Delay(1500);

        using var _context = DbFactory.CreateDbContext();

        ////-------------------------------------------

        var foundUser = await _context.Users.FirstOrDefaultAsync(x => x.Email == ResetPasswordModel.Email && x.RecoveryCode == ResetPasswordModel.RecoveryCode);
        if (foundUser == null)
        {
            _errorMessage = "User not found";
            loading = false;
            return;
        }

        ////-------------------------------------------
        foundUser.Password = ResetPasswordModel.NewPassword;
        foundUser.RecoveryCode = 0;

        _context.Users.Update(foundUser);
        _context.SaveChanges();

        ////-------------------------------------------

        loading = false;
        NavigationManager.NavigateTo("/login");
    }
}
