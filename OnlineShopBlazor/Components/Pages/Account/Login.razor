@page "/login"
@using FluentValidation
@using Blazored.FluentValidation
@using Microsoft.AspNetCore.Authentication.Cookies
@using OnlineShopBlazor.Models.Validations
@using OnlineShopBlazor.Models.ViewModels
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication;

@inject NavigationManager NavigationManager
@inject IValidator<LoginViewModel> Validator
@inject AuthService AuthService
@rendermode InteractiveServer


<div class="row justify-content-center" style="margin-top: 200px;">
    <div class="col-md-6 col-lg-5">
        <div class="card shadow-sm mt-4">
            <div class="card-header">
                <h3 class="mb-0">Login</h3>
            </div>
            <div class="card-body">
                @* EditForm binds directly to the User model instance *@
                <EditForm Model="LoginModel" Enhance OnValidSubmit="HandleValidSubmit" FormName="Login">
                    @* Integrate FluentValidation for the User model *@
                    <FluentValidationValidator Validator="Validator" />

                    @* Display general error messages *@
                    @if (!string.IsNullOrEmpty(_errorMessage))
                    {
                        <div class="alert alert-danger" role="alert">
                            @_errorMessage
                        </div>
                    }

                    @* Email Field - Bound to User.Email *@
                    <div class="mb-3">
                        <label for="email" class="form-label">Email address</label>
                        <InputText id="email" type="email" class="form-control" @bind-Value="LoginModel.Email" placeholder="Enter your email" />
                        <ValidationMessage For="@(() => LoginModel.Email)" class="invalid-feedback d-block" />
                    </div>

                    @* Password Field - Bound to User.Password *@
                    <div class="mb-3">
                        <label for="password" class="form-label">Password</label>
                        <InputText id="password" type="password" class="form-control" @bind-Value="LoginModel.Password" placeholder="Enter your password" />
                        <ValidationMessage For="@(() => LoginModel.Password)" class="invalid-feedback d-block" />
                    </div>


                    <div class="d-grid gap-2">
                        <button type="submit" class="btn btn-primary">
                            Login
                        </button>
                    </div>
                </EditForm>
            </div>
            <div class="card-footer text-center py-3">
                <a href="/Register">Already have no account? Register</a>
            </div>
        </div>
    </div>
</div>

<Preload />
@code {
    // Use the User model directly for binding
    [SupplyParameterFromForm]
    public LoginViewModel LoginModel { get; set; } = new();
    [Inject]
    protected PreloadService PreloadService { get; set; } = default!;
    private string? _errorMessage = null;

    private async Task HandleValidSubmit()
    {
        var result = await AuthService.LoginAsync(LoginModel.Email, LoginModel.Password);
        if (result)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            _errorMessage = "Invalid email or password.";
        }
    }
}
