@page "/register"
@using FluentValidation
@using Blazored.FluentValidation

 @inject NavigationManager NavigationManager
@inject IValidator<User> Validator
@inject IDbContextFactory<OnlineShopBlazor.Models.Db.OnlineShopContext> DbFactory
@rendermode InteractiveServer


<div class="row justify-content-center" style="margin-top: 200px;">
    <div class="col-md-6 col-lg-5">
        <div class="card shadow-sm mt-4">
            <div class="card-header">
                <h3 class="mb-0">Register</h3>
            </div>
            <div class="card-body">
                @* EditForm binds directly to the User model instance *@
                <EditForm Model="UserModel" Enhance OnValidSubmit="HandleValidSubmit" FormName="Register">
                    @* Integrate FluentValidation for the User model *@

                    <FluentValidationValidator Validator="Validator" />

                    @* Display general error messages *@
                    @if (!string.IsNullOrEmpty(_errorMessage))
                    {
                        <div class="alert alert-danger" role="alert">
                            @_errorMessage
                        </div>
                    }

                    @* Full Name Field - Bound to User.FullName *@
                    <div class="mb-3">
                        <label for="fullName" class="form-label">Full Name</label>
                        <InputText id="fullName" class="form-control" @bind-Value="UserModel.FullName" placeholder="Enter your full name" />
                        @* Validation message displayed via Blazored.FluentValidation integration *@
                        <ValidationMessage For="@(() => UserModel.FullName)" class="invalid-feedback d-block" />
                    </div>

                    @* Email Field - Bound to User.Email *@
                    <div class="mb-3">
                        <label for="email" class="form-label">Email address</label>
                        <InputText id="email" type="email" class="form-control" @bind-Value="UserModel.Email" placeholder="Enter your email" />
                        <ValidationMessage For="@(() => UserModel.Email)" class="invalid-feedback d-block" />
                    </div>

                    @* Password Field - Bound to User.Password *@
                    <div class="mb-3">
                        <label for="password" class="form-label">Password</label>
                        <InputText id="password" type="password" class="form-control" @bind-Value="UserModel.Password" placeholder="Enter your password" />
                        <ValidationMessage For="@(() => UserModel.Password)" class="invalid-feedback d-block" />
                    </div>


                    <div class="d-grid gap-2">
                        <button type="submit" class="btn btn-primary">
                            Register
                        </button>
                    </div>
                </EditForm>
            </div>
            <div class="card-footer text-center py-3">
                <a href="/login">Already have an account? Login</a>
            </div>
        </div>
    </div>
</div>

<Preload />
@code {
    // Use the User model directly for binding
    [SupplyParameterFromForm]
    public User UserModel { get; set; } = new();
    [Inject]
    protected PreloadService PreloadService { get; set; } = default!;
    private string? _errorMessage = null;

    private async Task HandleValidSubmit()
    {

        try
        {
            PreloadService.Show(SpinnerColor.Light, "Saving data...");
            await Task.Delay(1500);

            using var context = DbFactory.CreateDbContext();

            if (context.Users.Any(x => x.Email == UserModel.Email.Trim().ToLower()))
            {
                _errorMessage = "this email already is in use";
                return;
            }

            // --- Set default values for the new user ---
            UserModel.IsAdmin = false; // Default new users are not admins
            UserModel.RegisterDate = DateTime.Now; // Set registration timestamp
            UserModel.RecoveryCode = null; // No recovery code initially
            UserModel.Email = UserModel.Email.Trim().ToLower();
            UserModel.Password = UserModel.Password.Trim();
            UserModel.FullName = UserModel.FullName.Trim();

            await context.Users.AddAsync(UserModel);
            await context.SaveChangesAsync();

            UserModel = new(); // Create a new instance to clear bound fields
            NavigationManager.NavigateTo("/login");
        }
        catch (Exception ex)
        {
            // Log the actual exception for diagnostics
            Console.Error.WriteLine($"Registration failed: {ex.ToString()}");
            _errorMessage = "An unexpected error occurred during registration. Please try again later.";
        }
        finally
        {
            PreloadService.Hide();
        }

    }
}
