@page "/Cart"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using OnlineShopBlazor.Models.ViewModels
@using System.Security.Claims
@inject IDbContextFactory<OnlineShopOrginalContext> DbContextFactory
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@attribute [Authorize]
@rendermode InteractiveServer

<!--shopping cart area start -->
<div class="shopping_cart_area" style="margin-top: 200px;">
    <div class="container">
        @if (Model.Any())
        {

            <div class="cart_page_inner mb-60">
                <div class="row">
                    <div class="col-12">
                        <div class="cart_page_tabel">
                            <table>
                                <thead>
                                    <tr>
                                        <th>product </th>
                                        <th>information</th>
                                        <th>Price</th>
                                        <th>Quantity</th>
                                        <th>Total</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in Model)
                                    {
                                        <tr class="border-top" id="@item.ProductId">
                                            <td>
                                                <div class="cart_product_thumb">
                                                    <img src="/images/products/@item.ImageName" alt="@item.Title">
                                                </div>
                                            </td>
                                            <td>
                                                <div class="cart_product_text">
                                                    <h4>
                                                        @item.Title
                                                    </h4>
                                                </div>
                                            </td>
                                            <td>
                                                <div class="cart_product_price">
                                                    <span>
                                                        $@item.Price.ToString("F")
                                                    </span>
                                                </div>
                                            </td>
                                            <td class="product_quantity">
                                                <div class="cart_product_quantity">
                                                    <input @bind="@item.Count"
                                                           min="1"
                                                           max="100"
                                                           type="number"
                                                           @onblur="() => UpdateQuantity(item.ProductId, item.Count)" />
                                                </div>
                                            </td>
                                            <td>
                                                <div class="cart_product_price">
                                                    <span>
                                                        $@item.RowSum.ToString("F")
                                                    </span>
                                                </div>
                                            </td>
                                            <td>
                                                <div class="cart_product_remove text-right">
                                                    <a @onclick="() => RemoveItem(item.ProductId)"><i class="ion-android-close"></i></a>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                        <div class="cart_page_button border-top d-flex justify-content-between">
                            <div class="shopping_cart_btn">
                                <a @onclick="ClearCart" class="btn btn-primary border">CLEAR SHOPPING CART</a>
                                <a class="btn btn-primary border" href="/cart">UPDATE YOUR CART</a>
                            </div>
                            <div class="shopping_continue_btn">
                                <a class="btn btn-primary" href="/Shop">CONTINUE SHOPPING</a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!--coupon code area start-->
            <div class="cart_page_bottom">
                <div class="row d-flex justify-content-end">
                    <div class="col-lg-4 col-md-6 col-sm-8">
                        <div class="grand_totall_area">
                            <div class="grand_totall_inner border-bottom">
                                <div class="cart_grandtotal d-flex justify-content-between">
                                    <p>grand total</p>
                                    <span>$@Model.Sum(x => x.RowSum).ToString("F")</span>
                                </div>
                            </div>
                            <div class="proceed_checkout_btn">
                                <a class="btn btn-primary" href="/Checkout">Proceed to Checkout</a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!--coupon code area end-->
        }else{
            <Alert Color="AlertColor.Secondary"> 
                Cart is empty
            </Alert>
        }
    </div>
</div>
<!--shopping cart area end -->
@code {
    public List<CartViewItemViewModel> Model { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadCartAsync();
    }

    private async Task<int> GetUserIdAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            var userId = (int)int.Parse(user.FindFirst(ClaimTypes.NameIdentifier)?.Value);
            return userId;
        }
        return 0;
    }

    private async Task LoadCartAsync()
    {
        using var _context = DbContextFactory.CreateDbContext();

        var userId = await GetUserIdAsync();

        var cartItems = await _context.Carts
             .Where(c => c.UserId == userId)
             .ToListAsync();

        var productIds = cartItems.Select(c => c.ProductId).Distinct().ToList();

        var products = await _context.Products
            .Where(p => productIds.Contains(p.Id))
            .ToListAsync();

        Model = cartItems
            .Select(cart =>
            {
                var product = products.FirstOrDefault(p => p.Id == cart.ProductId);
                if (product == null) return null;

                return new CartViewItemViewModel
                    {
                        ProductId = product.Id,
                        Title = product.Title,
                        ImageName = product.ImageName,
                        Price = product.Price ?? 0,
                        Discount = product.Discount ?? 0,
                        Count = cart.Count,
                        RowSum = cart.Count * (product.Price ?? 0 - product.Discount ?? 0)
                    };
            })
            .Where(x => x != null)
            .ToList()!;
    }

    // حذف تمامی اقلام سبد خرید
    private async Task ClearCart()
    {
        using var _context = DbContextFactory.CreateDbContext();

        var userId = await GetUserIdAsync();

        var cartItems = _context.Carts.Where(c => c.UserId == userId);
        _context.Carts.RemoveRange(cartItems);
        await _context.SaveChangesAsync();

        // بارگذاری مجدد سبد خرید
        await LoadCartAsync();

        // هدایت به صفحه اصلی پس از حذف
        NavigationManager.NavigateTo("/Shop");
    }

    // Update quantity
    private async Task UpdateQuantity(int productId, int newQuantity)
    {
        using var _context = DbContextFactory.CreateDbContext();

        var userId = await GetUserIdAsync();

        var cartItem = await _context.Carts
            .FirstOrDefaultAsync(c => c.UserId == userId && c.ProductId == productId);

        if (cartItem != null)
        {
            cartItem.Count = newQuantity;
            await _context.SaveChangesAsync();
        }

        // Reload the cart after update
        await LoadCartAsync();
    }
    // حذف یک محصول از سبد خرید
    private async Task RemoveItem(int productId)
    {
        using var _context = DbContextFactory.CreateDbContext();

        var userId = await GetUserIdAsync();

        var cartItem = await _context.Carts
            .FirstOrDefaultAsync(c => c.UserId == userId && c.ProductId == productId);

        if (cartItem != null)
        {
            _context.Carts.Remove(cartItem);
            await _context.SaveChangesAsync();
        }

        // بارگذاری مجدد سبد خرید پس از حذف
        await LoadCartAsync();
    }
}
