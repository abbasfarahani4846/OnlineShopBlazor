@page "/user"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@implements IAsyncDisposable
@inject IDbContextFactory<OnlineShopOrginalContext> DbFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]


<div class="container" style="margin-top:200px">

    <dl class="row">
        <dt class="col-sm-2">
            Email
        </dt>
        <dd class="col-sm-10">
            @UserInfo.Email
        </dd>
        <dt class="col-sm-2">
            FullName
        </dt>
        <dd class="col-sm-10">
            @UserInfo.FullName
        </dd>
        <dt class="col-sm-2">
            RegisterDate
        </dt>
        <dd class="col-sm-10">
            @UserInfo.RegisterDate
        </dd>
    </dl>

</div>


@code {
    public User UserInfo { get; set; } = new User();

    private OnlineShopOrginalContext context = default!; // Database context instance

    protected override async Task OnInitializedAsync()
    {
        // Create a new database context instance
        context = DbFactory.CreateDbContext();
        var userId = await GetUserIdAsync();

        if (userId > 0)
        {
            UserInfo = await context.Users.FirstOrDefaultAsync(x => x.Id == userId);
        }
        else
        {
            NavigationManager.NavigateTo("/login");
        }
    }

    private async Task<int> GetUserIdAsync()
    {
        // Get the currently authenticated user
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            // Try to extract and parse the user ID from claims
            var userIdClaim = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            if (int.TryParse(userIdClaim, out int parsedUserId))
            {
                return parsedUserId;
            }
        }

        // Return 0 if user is not authenticated or user ID is invalid
        return 0;
    }

    public async ValueTask DisposeAsync()
        => await context.DisposeAsync(); // Dispose of the database context when the component is disposed

}
