@page "/orders/details"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using OnlineShopBlazor.Models.Db
@using System.Security.Claims
@inject IDbContextFactory<OnlineShopBlazor.Models.Db.OnlineShopOrginalContext> DbFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]

<PageTitle>
    Order details
</PageTitle>

<div class="container" style="margin-top:200px">
    <div>
        <h2>Order</h2>
        <hr />
        @if (order is null)
        {
            // Show a loading spinner while order data is being fetched
            <Spinner Class="me-3" Type="SpinnerType.Dots" Color="SpinnerColor.Light" />
        }
        else
        {
            // Display order fields using a definition list
            <dl class="row">
                <dt class="col-sm-2">OrderId</dt>
                <dd class="col-sm-10">@order.Id</dd>

                <dt class="col-sm-2">FirstName</dt>
                <dd class="col-sm-10">@order.FirstName</dd>

                <dt class="col-sm-2">LastName</dt>
                <dd class="col-sm-10">@order.LastName</dd>

                <dt class="col-sm-2">CompanyName</dt>
                <dd class="col-sm-10">@order.CompanyName</dd>

                <dt class="col-sm-2">Country</dt>
                <dd class="col-sm-10">@order.Country</dd>

                <dt class="col-sm-2">Address</dt>
                <dd class="col-sm-10">@order.Address</dd>

                <dt class="col-sm-2">City</dt>
                <dd class="col-sm-10">@order.City</dd>

                <dt class="col-sm-2">Email</dt>
                <dd class="col-sm-10">@order.Email</dd>

                <dt class="col-sm-2">Phone</dt>
                <dd class="col-sm-10">@order.Phone</dd>

                <dt class="col-sm-2">Comment</dt>
                <dd class="col-sm-10">@order.Comment</dd>

                <dt class="col-sm-2">CouponCode</dt>
                <dd class="col-sm-10">@order.CouponCode</dd>

                <dt class="col-sm-2">CouponDiscount</dt>
                <dd class="col-sm-10">@order.CouponDiscount</dd>

                <dt class="col-sm-2">Shipping</dt>
                <dd class="col-sm-10">@order.Shipping</dd>

                <dt class="col-sm-2">SubTotal</dt>
                <dd class="col-sm-10">@order.SubTotal</dd>

                <dt class="col-sm-2">Total</dt>
                <dd class="col-sm-10">@order.Total</dd>

                <dt class="col-sm-2">CreateDate</dt>
                <dd class="col-sm-10">@order.CreateDate</dd>

                <dt class="col-sm-2">TransId</dt>
                <dd class="col-sm-10">@order.TransId</dd>

                <dt class="col-sm-2">Status</dt>
                <dd class="col-sm-10">@order.Status</dd>
            </dl>

            // Display order details (products in the order) in a table
            <table class="table table-responsive">
                <thead>
                    <tr>
                        <th>Title</th>
                        <th>Price</th>
                        <th>Count</th>
                        <th>Total</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in OrderDetails)
                    {
                        <tr>
                            <td>@item.ProductTitle</td>
                            <td>@item.ProductPrice</td>
                            <td>@item.Count</td>
                            <td>@(item.Count * item.ProductPrice)</td>
                        </tr>
                    }
                </tbody>
            </table>

            // Link to return to user's order list
            <div>
                <a href="@($"/user/orders")">Back to List</a>
            </div>
        }
    </div>
</div>

@code {
    private Order? order; // Holds the selected order
    public List<OrderDetail> OrderDetails { get; set; } // Holds the order's product details
    [SupplyParameterFromQuery]
    private int Id { get; set; } // Order ID from query string

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        var userId = await GetUserIdAsync();

        // Load the order only if it belongs to the logged-in user
        order = await context.Orders.FirstOrDefaultAsync(m => m.Id == Id && m.UserId == userId);

        if (order is null)
        {
            // Redirect to notfound if the order doesn't exist or is not the user's
            NavigationManager.NavigateTo("notfound");
        }

        // Load the order's product details
        OrderDetails = await context.OrderDetails
            .Where(m => m.OrderId == Id)
            .ToListAsync();
    }

    private async Task<int> GetUserIdAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            var userIdClaim = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            if (int.TryParse(userIdClaim, out int parsedUserId))
            {
                return parsedUserId;
            }
        }

        // Return 0 if not authenticated or no valid user ID claim
        return 0;
    }
}
