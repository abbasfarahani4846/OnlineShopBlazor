@page "/productDetails"
@using Microsoft.EntityFrameworkCore
@using OnlineShopBlazor.Models.Db
@inject IDbContextFactory<OnlineShopBlazor.Models.Db.OnlineShopContext> DbFactory
@inject NavigationManager NavigationManager
@inject IWebHostEnvironment WebHostEnvironment

<!--breadcrumbs area start-->
<div class="breadcrumbs_area breadcrumbs_product">
    <div class="container">
        <div class="row">
            <div class="col-12">
                <div class="breadcrumb_content">
                    <ul>
                        <li>
                            <a href="/">home</a>
                        </li>
                        <li>
                            <a href="/products">shop</a>
                        </li>
                        <li>
                            @Product.Title
                        </li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>
<!--breadcrumbs area end-->
<!--product details start-->
<section class="product_details mb-135">
    <div class="container">
        <div class="row">
            <div class="col-lg-6 col-md-6">
                <div class="product_zoom_gallery">
                    <Carousel Touch="true">
                        <CarouselItem Active="true">

                            <div class="col text-center">
                                <img src="/images/products/@Product.ImageName" alt="@Product.ImageName" style="height:75vh" />

                            </div>
                        </CarouselItem>
                        @foreach (var item in Galleries)
                        {
                            <CarouselItem>
                                <div class="col text-center">
                                    <img src="/images/products/@item.ImageName" alt="@item.ImageName" style="height:75vh" />
                                </div>
                            </CarouselItem>
                        }

                    </Carousel>
                </div>
            </div>
            <div class="col-lg-6 col-md-6">
                <div class="product_d_right">
                    <form action="#">
                        <h1>
                            @Product.Title
                        </h1>
                        <div class="product_ratting_review d-flex align-items-center">
                            <div class="product_review">
                                <ul class="d-flex">
                                    <li>Write your review</li>
                                </ul>
                            </div>
                        </div>
                        <div class="price_box">
                            @if (Product.Discount != null && Product.Price > 0)
                            {
                                <span class="current_price">$@(Product.Price - Product.Discount)</span>
                                <span class="old_price">$@Product.Price</span>
                            }
                            else
                            {
                                <span class="current_price">$@Product.Price</span>
                            }

                        </div>
                        <div class="product_availalbe">
                            <ul class="d-flex">
                                <li>
                                    <i class="icon-layers icons"></i> Only
                                    <span>
                                        @Product.Qty
                                    </span> left
                                </li>
                                <li>
                                    Availalbe:
                                    @if (Product.Qty > 0)
                                    {
                                        <span class="stock">In Stock</span>
                                    }
                                    else
                                    {
                                        <span class="text-danger">
                                            No
                                        </span>
                                    }
                                </li>
                            </ul>
                        </div>
                        <div class="product_desc">
                            <p>
                                @Product.Description
                            </p>
                        </div>
                        <div class="product_variant">
                            <div class="variant_quantity_btn d-flex">
                                @if (Product.Qty > 0)
                                {
                                    @*      <div class="pro-qty border">
                                        <input min="1" max="100" type="tex" value="1">
                                    </div> *@
                                    <a class="button btn btn-primary" onclick="updateCart(Product.Id,1)">
                                        <i class="ion-android-add"></i>
                                        Add To Cart
                                    </a>
                                }

                            </div>
                        </div>
                        <div class="product_sku">
                            <p><span>SKU: </span> #PRI @Product.Id</p>
                        </div>
                        <div class="product_tags d-flex">
                            @if (!string.IsNullOrEmpty(Product.Tags))
                            {
                                var tags = Product.Tags.Split(",");
                                <span>tags: </span>
                                <ul class="d-flex">
                                    @foreach (var item in tags)
                                    {
                                        <li>
                                            <a href="/shop?searchText=@item">@item</a>
                                        </li>
                                    }
                                </ul>
                            }
                        </div>

                    </form>
                </div>
            </div>
        </div>
    </div>
</section>
<!--product details end-->
<!--product info start-->
<div class="product_d_info mb-118">
    <div class="container">
        <div class="row">
            <div class="col-12">
                <div class="product_d_inner">
                    <div class="product_info_button border-bottom">
                      <OnlineShopBlazor.Components.Pages.Common.ProductDetailsTabComponnets Product="Product"/>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<!--product info end-->
<!--product area start-->

<section class="product_area related_products mb-118">
    <div class="container">
        <div class="row">
            <div class="col-12">
                <div class="section_title mb-50">
                    <h2>New Products</h2>
                </div>
            </div>
        </div>
        <div class="product_container row">
            <OnlineShopBlazor.Components.Pages.Common.NewProductsComponent />
        </div>
    </div>
</section>

<script>
    window.scrollTo = (element) => {
        element.scrollTop = 0;
    };
</script>
<!--product area end-->
@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    private Product? Product { get; set; } = new();
    private List<ProductGallery> Galleries { get; set; } = new();

    private OnlineShopContext context = default!;
    protected override async Task OnInitializedAsync()
    {
        context = DbFactory.CreateDbContext();
        Product = await context.Products.FirstOrDefaultAsync(x => x.Id == Id);

        if (Product.Id == 0)
        {
            NavigationManager.NavigateTo("notfound");
        }
        Galleries = context.ProductGalleries.Where(x => x.ProductId == Product.Id).ToList();

    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}